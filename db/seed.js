const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
require('dotenv').config({ path: '../server/.env' });

// Import models
const User = require('../server/models/User');
const Question = require('../server/models/Question');
const Answer = require('../server/models/Answer');

// Sample data
const sampleUsers = [
  {
    name: 'John Doe',
    email: 'john@example.com',
    password: 'password123',
    language: 'en',
    avatar: 'https://ui-avatars.com/api/?name=John+Doe&background=random',
    reputation: 150,
    isVerified: true
  },
  {
    name: 'Jane Smith',
    email: 'jane@example.com',
    password: 'password123',
    language: 'en',
    avatar: 'https://ui-avatars.com/api/?name=Jane+Smith&background=random',
    reputation: 200,
    isVerified: true
  },
  {
    name: '‡§∞‡§æ‡§π‡•Å‡§≤ ‡§ï‡•Å‡§Æ‡§æ‡§∞',
    email: 'rahul@example.com',
    password: 'password123',
    language: 'hi',
    avatar: 'https://ui-avatars.com/api/?name=Rahul+Kumar&background=random',
    reputation: 100,
    isVerified: false
  }
];

const sampleQuestions = [
  {
    title: 'How to implement authentication in React?',
    content: 'I am building a React application and need to implement user authentication. What are the best practices for handling login, logout, and protected routes?',
    tags: ['react', 'authentication', 'javascript'],
    language: 'en',
    votes: 15,
    views: 120
  },
  {
    title: 'React ‡§Æ‡•á‡§Ç authentication ‡§ï‡•à‡§∏‡•á implement ‡§ï‡§∞‡•á‡§Ç?',
    content: '‡§Æ‡•à‡§Ç ‡§è‡§ï React application ‡§¨‡§®‡§æ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç ‡§î‡§∞ user authentication implement ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ Login, logout ‡§î‡§∞ protected routes ‡§ï‡•á ‡§≤‡§ø‡§è best practices ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç?',
    tags: ['react', 'authentication', 'javascript'],
    language: 'hi',
    votes: 8,
    views: 85
  },
  {
    title: 'Best practices for MongoDB schema design',
    content: 'I am designing a database schema for a Q&A platform. What are the best practices for MongoDB schema design to ensure good performance and scalability?',
    tags: ['mongodb', 'database', 'schema-design'],
    language: 'en',
    votes: 12,
    views: 95
  }
];

const sampleAnswers = [
  {
    content: 'For React authentication, I recommend using JWT tokens with Context API or Redux for state management. You can also use libraries like Auth0 or Firebase Auth for easier implementation.',
    votes: 8
  },
  {
    content: 'React authentication ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§Æ‡•à‡§Ç JWT tokens ‡§ï‡•á ‡§∏‡§æ‡§• Context API ‡§Ø‡§æ Redux ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§¶‡•á‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§™ ‡§Ü‡§∏‡§æ‡§® implementation ‡§ï‡•á ‡§≤‡§ø‡§è Auth0 ‡§Ø‡§æ Firebase Auth ‡§ú‡•à‡§∏‡•Ä libraries ‡§≠‡•Ä use ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§',
    votes: 5
  },
  {
    content: 'For MongoDB schema design, consider embedding documents for one-to-few relationships and using references for one-to-many. Always create indexes on frequently queried fields.',
    votes: 10
  }
];

async function seedDatabase() {
  try {
    // Connect to MongoDB
    await mongoose.connect(
      process.env.MONGODB_URI || 'mongodb://localhost:27017/stackit',
      {
        useNewUrlParser: true,
        useUnifiedTopology: true,
      }
    );
    console.log('‚úÖ Connected to MongoDB');

    // Clear existing data
    await User.deleteMany({});
    await Question.deleteMany({});
    await Answer.deleteMany({});
    console.log('‚úÖ Cleared existing data');

    // Create users
    const createdUsers = [];
    for (const userData of sampleUsers) {
      const hashedPassword = await bcrypt.hash(userData.password, 12);
      const user = await User.create({
        ...userData,
        password: hashedPassword
      });
      createdUsers.push(user);
      console.log(`‚úÖ Created user: ${user.name}`);
    }

    // Create questions
    const createdQuestions = [];
    for (let i = 0; i < sampleQuestions.length; i++) {
      const questionData = sampleQuestions[i];
      const question = await Question.create({
        ...questionData,
        author: createdUsers[i % createdUsers.length]._id
      });
      createdQuestions.push(question);
      console.log(`‚úÖ Created question: ${question.title}`);
    }

    // Create answers
    for (let i = 0; i < sampleAnswers.length; i++) {
      const answerData = sampleAnswers[i];
      const answer = await Answer.create({
        ...answerData,
        author: createdUsers[i % createdUsers.length]._id,
        question: createdQuestions[i % createdQuestions.length]._id
      });
      console.log(`‚úÖ Created answer for question: ${createdQuestions[i % createdQuestions.length].title}`);
    }

    console.log('\nüéâ Database seeded successfully!');
    console.log(`üìä Created ${createdUsers.length} users`);
    console.log(`üìä Created ${createdQuestions.length} questions`);
    console.log(`üìä Created ${sampleAnswers.length} answers`);

  } catch (error) {
    console.error('‚ùå Error seeding database:', error);
  } finally {
    await mongoose.disconnect();
    console.log('‚úÖ Disconnected from MongoDB');
  }
}

// Run the seed function
seedDatabase(); 